// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: file_scan_stat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScanStatServiceClient is the client API for ScanStatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScanStatServiceClient interface {
	GetFilesStats(ctx context.Context, in *FsRequest, opts ...grpc.CallOption) (ScanStatService_GetFilesStatsClient, error)
	Process(ctx context.Context, in *TriggerBackend, opts ...grpc.CallOption) (*TriggerBackendRes, error)
}

type scanStatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScanStatServiceClient(cc grpc.ClientConnInterface) ScanStatServiceClient {
	return &scanStatServiceClient{cc}
}

func (c *scanStatServiceClient) GetFilesStats(ctx context.Context, in *FsRequest, opts ...grpc.CallOption) (ScanStatService_GetFilesStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScanStatService_ServiceDesc.Streams[0], "/filescanstat.ScanStatService/GetFilesStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &scanStatServiceGetFilesStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScanStatService_GetFilesStatsClient interface {
	Recv() (*FilesStats, error)
	grpc.ClientStream
}

type scanStatServiceGetFilesStatsClient struct {
	grpc.ClientStream
}

func (x *scanStatServiceGetFilesStatsClient) Recv() (*FilesStats, error) {
	m := new(FilesStats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scanStatServiceClient) Process(ctx context.Context, in *TriggerBackend, opts ...grpc.CallOption) (*TriggerBackendRes, error) {
	out := new(TriggerBackendRes)
	err := c.cc.Invoke(ctx, "/filescanstat.ScanStatService/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScanStatServiceServer is the server API for ScanStatService service.
// All implementations must embed UnimplementedScanStatServiceServer
// for forward compatibility
type ScanStatServiceServer interface {
	GetFilesStats(*FsRequest, ScanStatService_GetFilesStatsServer) error
	Process(context.Context, *TriggerBackend) (*TriggerBackendRes, error)
	mustEmbedUnimplementedScanStatServiceServer()
}

// UnimplementedScanStatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScanStatServiceServer struct {
}

func (UnimplementedScanStatServiceServer) GetFilesStats(*FsRequest, ScanStatService_GetFilesStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFilesStats not implemented")
}
func (UnimplementedScanStatServiceServer) Process(context.Context, *TriggerBackend) (*TriggerBackendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedScanStatServiceServer) mustEmbedUnimplementedScanStatServiceServer() {}

// UnsafeScanStatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScanStatServiceServer will
// result in compilation errors.
type UnsafeScanStatServiceServer interface {
	mustEmbedUnimplementedScanStatServiceServer()
}

func RegisterScanStatServiceServer(s grpc.ServiceRegistrar, srv ScanStatServiceServer) {
	s.RegisterService(&ScanStatService_ServiceDesc, srv)
}

func _ScanStatService_GetFilesStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScanStatServiceServer).GetFilesStats(m, &scanStatServiceGetFilesStatsServer{stream})
}

type ScanStatService_GetFilesStatsServer interface {
	Send(*FilesStats) error
	grpc.ServerStream
}

type scanStatServiceGetFilesStatsServer struct {
	grpc.ServerStream
}

func (x *scanStatServiceGetFilesStatsServer) Send(m *FilesStats) error {
	return x.ServerStream.SendMsg(m)
}

func _ScanStatService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerBackend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanStatServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filescanstat.ScanStatService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanStatServiceServer).Process(ctx, req.(*TriggerBackend))
	}
	return interceptor(ctx, in, info, handler)
}

// ScanStatService_ServiceDesc is the grpc.ServiceDesc for ScanStatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScanStatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filescanstat.ScanStatService",
	HandlerType: (*ScanStatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _ScanStatService_Process_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFilesStats",
			Handler:       _ScanStatService_GetFilesStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_scan_stat.proto",
}
